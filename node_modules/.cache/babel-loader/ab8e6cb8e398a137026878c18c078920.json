{"ast":null,"code":"import _slicedToArray from \"D:\\\\reactpro1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\reactpro1\\\\src\\\\views\\\\Register\\\\Register.js\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\nimport { Formik, Form } from \"formik\";\nimport { Button, FormGroup, Label, Input, Container, Col } from \"reactstrap\";\nimport * as Yup from \"yup\";\nimport InputField from \"../../components/FormFields/InputField.js\";\nimport \"./register.scss\";\nimport { addUserAction } from \"../../store/reducers/registerReducer.js\";\nimport { registerApi } from \"./registerApi\";\n\nconst Register = () => {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        user = _useState2[0],\n        setUser = _useState2[1];\n\n  const usedispatch = useDispatch();\n\n  const addUser = userparam => usedispatch(addUserAction(userparam));\n\n  return React.createElement(\"div\", {\n    className: \"register_container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(Formik, {\n    initialValues: {\n      userName: \"\",\n      fullName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\"\n    },\n    validationSchema: Yup.object().shape({\n      userName: Yup.string().required(\"User Name is required\").min(6, \"User Name must be at least 6 characters\"),\n      fullName: Yup.string().required(\"Full Name is required\"),\n      email: Yup.string().email(\"Email is invalid\").required(\"Email is required\"),\n      password: Yup.string().min(8, \"Password must be at least 8 characters\").required(\"Password is required\"),\n      //.matches(\n      //  /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/,\n      //  \"Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character\"\n      // ),\n      confirmPassword: Yup.string().oneOf([Yup.ref(\"password\"), null], \"Passwords must match\").required(\"Confirm Password is required\")\n    }),\n    onSubmit: fields => {\n      //console.log(fields);\n      addUser(fields); // alert(\"SUCCESS!! :-)\\n\\n\" + JSON.stringify(fields, null, 4));\n\n      registerApi(fields.userName, fields.fullName, fields.email, fields.password).then(res => {\n        console.log(\"adsfsd\", res);\n        return React.createElement(Redirect, {\n          to: \"/login\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        });\n      });\n    },\n    render: props => {\n      const handleBlur = props.handleBlur,\n            handleChange = props.handleChange,\n            values = props.values,\n            errors = props.errors,\n            touched = props.touched;\n\n      if (sessionStorage.getItem(\"userData\")) {\n        return React.createElement(Redirect, {\n          to: \"/\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(Form, {\n        className: \"register_form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"Register\"), React.createElement(InputField, {\n        label: \"User Name\",\n        name: \"userName\",\n        className: errors.userName && touched.userName && \" is-invalid\",\n        onBlur: handleBlur,\n        onChange: handleChange,\n        value: values.userName,\n        errorLabel: errors.userName,\n        iconClass: \"username\",\n        placeholder: \"User Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }), React.createElement(InputField, {\n        label: \"Full Name\",\n        name: \"fullName\",\n        className: errors.fullName && touched.fullName && \" is-invalid\",\n        onBlur: handleBlur,\n        onChange: handleChange,\n        value: values.fullName,\n        errorLabel: errors.fullName,\n        iconClass: \"fullname\",\n        placeholder: \"Full Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }), React.createElement(InputField, {\n        label: \"Email\",\n        htmlFor: \"email\",\n        type: \"email\",\n        name: \"email\",\n        className: \"form-control\" + (errors.email && touched.email ? \" is-invalid\" : \"\"),\n        onBlur: handleBlur,\n        onChange: handleChange,\n        value: values.email,\n        errorLabel: errors.email,\n        errorClassname: \"invalid-feedback\",\n        iconClass: \"email\",\n        placeholder: \"Email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), React.createElement(InputField, {\n        label: \"Password\",\n        htmlFor: \"password\",\n        type: \"password\",\n        name: \"password\",\n        className: \"form-control\" + (errors.password && touched.password ? \" is-invalid\" : \"\"),\n        onBlur: handleBlur,\n        onChange: handleChange,\n        value: values.password,\n        errorLabel: errors.password,\n        errorClassname: \"invalid-feedback\",\n        iconClass: \"password\",\n        placeholder: \"Password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }), React.createElement(InputField, {\n        label: \"Confirm Password\",\n        htmlFor: \"confirmPassword\",\n        type: \"password\",\n        name: \"confirmPassword\",\n        className: \"form-control\" + (errors.confirmPassword && touched.confirmPassword ? \" is-invalid\" : \"\"),\n        onBlur: handleBlur,\n        onChange: handleChange,\n        value: values.confirmPassword,\n        errorLabel: errors.confirmPassword,\n        errorClassname: \"invalid-feedback\",\n        iconClass: \"password\",\n        placeholder: \"Confirm Password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \"Register\"), \" \", React.createElement(Button, {\n        type: \"reset\",\n        color: \"secondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, \"Login\")));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }));\n};\n\nexport default Register;","map":{"version":3,"sources":["D:/reactpro1/src/views/Register/Register.js"],"names":["React","useState","useDispatch","useSelector","axios","Redirect","Formik","Form","Button","FormGroup","Label","Input","Container","Col","Yup","InputField","addUserAction","registerApi","Register","user","setUser","usedispatch","addUser","userparam","userName","fullName","email","password","confirmPassword","object","shape","string","required","min","oneOf","ref","fields","then","res","console","log","props","handleBlur","handleChange","values","errors","touched","sessionStorage","getItem"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport { Formik, Form } from \"formik\";\r\nimport { Button, FormGroup, Label, Input, Container, Col } from \"reactstrap\";\r\nimport * as Yup from \"yup\";\r\nimport InputField from \"../../components/FormFields/InputField.js\";\r\nimport \"./register.scss\";\r\n\r\nimport { addUserAction } from \"../../store/reducers/registerReducer.js\";\r\nimport { registerApi } from \"./registerApi\";\r\n\r\nconst Register = () => {\r\n  const [user, setUser] = useState(\"\");\r\n  const usedispatch = useDispatch();\r\n  const addUser = userparam => usedispatch(addUserAction(userparam));\r\n\r\n  return (\r\n    <div className=\"register_container\">\r\n      <Formik\r\n        initialValues={{\r\n          userName: \"\",\r\n          fullName: \"\",\r\n          email: \"\",\r\n          password: \"\",\r\n          confirmPassword: \"\"\r\n        }}\r\n        validationSchema={Yup.object().shape({\r\n          userName: Yup.string()\r\n            .required(\"User Name is required\")\r\n            .min(6, \"User Name must be at least 6 characters\"),\r\n\r\n          fullName: Yup.string().required(\"Full Name is required\"),\r\n\r\n          email: Yup.string()\r\n            .email(\"Email is invalid\")\r\n            .required(\"Email is required\"),\r\n          password: Yup.string()\r\n            .min(8, \"Password must be at least 8 characters\")\r\n            .required(\"Password is required\"),\r\n          //.matches(\r\n          //  /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/,\r\n          //  \"Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character\"\r\n          // ),\r\n          confirmPassword: Yup.string()\r\n            .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\r\n            .required(\"Confirm Password is required\")\r\n        })}\r\n        onSubmit={fields => {\r\n          //console.log(fields);\r\n          addUser(fields);\r\n          // alert(\"SUCCESS!! :-)\\n\\n\" + JSON.stringify(fields, null, 4));\r\n          registerApi(\r\n            fields.userName,\r\n            fields.fullName,\r\n            fields.email,\r\n            fields.password\r\n          ).then(res => {\r\n            console.log(\"adsfsd\", res);\r\n            return <Redirect to={\"/login\"} />;\r\n          });\r\n        }}\r\n        render={props => {\r\n          const { handleBlur, handleChange, values, errors, touched } = props;\r\n\r\n          if (sessionStorage.getItem(\"userData\")) {\r\n            return <Redirect to={\"/\"} />;\r\n          }\r\n          return (\r\n            <Form className=\"register_form\">\r\n              <h1>Register</h1>\r\n              {/* {console.log(errors, touched)} */}\r\n              <InputField\r\n                label=\"User Name\"\r\n                name=\"userName\"\r\n                className={errors.userName && touched.userName && \" is-invalid\"}\r\n                onBlur={handleBlur}\r\n                onChange={handleChange}\r\n                value={values.userName}\r\n                errorLabel={errors.userName}\r\n                iconClass=\"username\"\r\n                placeholder=\"User Name\"\r\n              />\r\n\r\n              <InputField\r\n                label=\"Full Name\"\r\n                name=\"fullName\"\r\n                className={errors.fullName && touched.fullName && \" is-invalid\"}\r\n                onBlur={handleBlur}\r\n                onChange={handleChange}\r\n                value={values.fullName}\r\n                errorLabel={errors.fullName}\r\n                iconClass=\"fullname\"\r\n                placeholder=\"Full Name\"\r\n              />\r\n              <InputField\r\n                label=\"Email\"\r\n                htmlFor=\"email\"\r\n                type=\"email\"\r\n                name=\"email\"\r\n                className={\r\n                  \"form-control\" +\r\n                  (errors.email && touched.email ? \" is-invalid\" : \"\")\r\n                }\r\n                onBlur={handleBlur}\r\n                onChange={handleChange}\r\n                value={values.email}\r\n                errorLabel={errors.email}\r\n                errorClassname=\"invalid-feedback\"\r\n                iconClass=\"email\"\r\n                placeholder=\"Email\"\r\n              />\r\n\r\n              <InputField\r\n                label=\"Password\"\r\n                htmlFor=\"password\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                className={\r\n                  \"form-control\" +\r\n                  (errors.password && touched.password ? \" is-invalid\" : \"\")\r\n                }\r\n                onBlur={handleBlur}\r\n                onChange={handleChange}\r\n                value={values.password}\r\n                errorLabel={errors.password}\r\n                errorClassname=\"invalid-feedback\"\r\n                iconClass=\"password\"\r\n                placeholder=\"Password\"\r\n              />\r\n\r\n              <InputField\r\n                label=\"Confirm Password\"\r\n                htmlFor=\"confirmPassword\"\r\n                type=\"password\"\r\n                name=\"confirmPassword\"\r\n                className={\r\n                  \"form-control\" +\r\n                  (errors.confirmPassword && touched.confirmPassword\r\n                    ? \" is-invalid\"\r\n                    : \"\")\r\n                }\r\n                onBlur={handleBlur}\r\n                onChange={handleChange}\r\n                value={values.confirmPassword}\r\n                errorLabel={errors.confirmPassword}\r\n                errorClassname=\"invalid-feedback\"\r\n                iconClass=\"password\"\r\n                placeholder=\"Confirm Password\"\r\n              />\r\n\r\n              <div className=\"form-group\">\r\n                <Button color=\"primary\">Register</Button>{\" \"}\r\n                <Button type=\"reset\" color=\"secondary\">\r\n                  Login\r\n                </Button>\r\n              </div>\r\n            </Form>\r\n          );\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n"]},"metadata":{},"sourceType":"module"}